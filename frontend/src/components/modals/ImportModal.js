import React, { useState } from 'react';
import { useApp } from '../../contexts/AppContext';
import { clientService } from '../../services/clientService';
import { parseExcelFile } from '../../utils/excelUtils';
import Modal from '../common/Modal';
import Button from '../common/Button';
import LoadingSpinner from '../common/LoadingSpinner';

const ImportModal = ({ isOpen, onClose, selectedCapital }) => {
  const { loadClients } = useApp();
  const [importData, setImportData] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    setLoading(true);
    setError('');

    try {
      const parsedData = await parseExcelFile(file);
      setImportData(JSON.stringify(parsedData, null, 2));
    } catch (error) {
      console.error('File parsing error:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleImport = async () => {
    if (!importData.trim()) {
      setError('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
      return;
    }

    if (!selectedCapital) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–ø–∏—Ç–∞–ª');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const clients = JSON.parse(importData);
      const results = await clientService.bulkImport(clients, selectedCapital.id);
      
      const successCount = results.filter(r => r.success).length;
      const errorCount = results.filter(r => !r.success).length;

      if (successCount > 0) {
        await loadClients(selectedCapital.id);
        
        if (errorCount === 0) {
          alert(`–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${successCount} –∫–ª–∏–µ–Ω—Ç–æ–≤`);
          handleClose();
        } else {
          alert(`–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${successCount} –∫–ª–∏–µ–Ω—Ç–æ–≤. –û—à–∏–±–æ–∫: ${errorCount}`);
        }
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞');
      }
    } catch (error) {
      console.error('Import error:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setImportData('');
    setError('');
    onClose();
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={handleClose}
      title="–ò–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ Excel"
      size="xl"
    >
      <div className="space-y-6">
        {/* File Upload */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª
          </label>
          <input
            type="file"
            accept=".xlsx,.xls"
            onChange={handleFileUpload}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        {/* Excel Structure Info */}
        <div className="bg-gray-50 p-4 rounded-lg">
          <h4 className="text-lg font-medium text-gray-900 mb-3">
            üìä –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Excel —Ñ–∞–π–ª–∞:
          </h4>
          <div className="bg-gray-50 p-4 rounded-xl text-sm overflow-auto">
            <div className="mb-3">
              <h6 className="font-medium text-gray-800 mb-2">–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:</h6>
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div><span className="font-medium">A:</span> ‚Ññ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)</div>
                <div><span className="font-medium">B:</span> –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ <span className="text-red-500">*</span></div>
                <div><span className="font-medium">C:</span> –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ <span className="text-red-500">*</span></div>
                <div><span className="font-medium">D:</span> –î–æ–ª–≥ –∫–ª–∏–µ–Ω—Ç–∞ <span className="text-red-500">*</span></div>
                <div><span className="font-medium">E:</span> –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –≤–∑–Ω–æ—Å <span className="text-red-500">*</span></div>
                <div><span className="font-medium">F:</span> –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ <span className="text-red-500">*</span></div>
                <div><span className="font-medium">G:</span> –ö–æ–Ω–µ—Ü –ø–ª–∞—Ç–µ–∂–µ–π <span className="text-red-500">*</span></div>
              </div>
            </div>
            
            <div className="mb-3">
              <h6 className="font-medium text-gray-800 mb-2">–ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π (—Å—Ç–æ–ª–±—Ü—ã H-BC):</h6>
              <div className="text-xs text-gray-600 bg-yellow-50 p-2 rounded">
                <strong>H-I:</strong> –ü–ª–∞—Ç–µ–∂ 1, –°—Ç–∞—Ç—É—Å 1 | <strong>J-K:</strong> –ü–ª–∞—Ç–µ–∂ 2, –°—Ç–∞—Ç—É—Å 2 | ... | <strong>BB-BC:</strong> –ü–ª–∞—Ç–µ–∂ 24, –°—Ç–∞—Ç—É—Å 24
                <br />
                <em>–°—Ç–∞—Ç—É—Å—ã:</em> "–û–ø–ª–∞—á–µ–Ω", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ", "–ë—É–¥—É—â–∏–π" (–∏–ª–∏ –ø—É—Å—Ç–æ)
              </div>
            </div>
            
            <div>
              <h6 className="font-medium text-gray-800 mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h6>
              <div className="grid grid-cols-2 gap-2 text-xs">
                <div><span className="font-medium">BD:</span> –§–ò–û –ì–∞—Ä–∞–Ω—Ç–∞</div>
                <div><span className="font-medium">BE:</span> –ê–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞</div>
                <div><span className="font-medium">BF:</span> –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞</div>
                <div><span className="font-medium">BG:</span> –¢–µ–ª–µ—Ñ–æ–Ω –≥–∞—Ä–∞–Ω—Ç–∞</div>
              </div>
            </div>
          </div>
        </div>

        {/* Important Notes */}
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
          <h5 className="font-medium text-blue-800 mb-2">‚ÑπÔ∏è –í–∞–∂–Ω–æ:</h5>
          <ul className="text-sm text-blue-700 space-y-1">
            <li>‚Ä¢ –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω—É–∂–Ω—ã)</li>
            <li>‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –§–ò–û, —Ç–æ–≤–∞—Ä, —Å—É–º–º—ã, –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞</li>
            <li>‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞, –∑–∞—Ç–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞</li>
            <li>‚Ä¢ –°—Ç–∞—Ç—É—Å—ã: "–û–ø–ª–∞—á–µ–Ω", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ", "–ë—É–¥—É—â–∏–π" (–∏–ª–∏ –ø—É—Å—Ç–æ)</li>
            <li>‚Ä¢ –î–∞—Ç—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–î–î.–ú–ú.–ì–ì–ì–ì, –ì–ì–ì–ì-–ú–ú-–î–î, Excel-–¥–∞—Ç—ã)</li>
            <li>‚Ä¢ –°—É–º–º—ã —É–∫–∞–∑—ã–≤–∞–π—Ç–µ —á–∏—Å–ª–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤</li>
          </ul>
        </div>

        {/* Data Preview */}
        {importData && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:
            </label>
            <textarea
              value={importData}
              onChange={(e) => setImportData(e.target.value)}
              className="w-full h-64 px-3 py-2 border border-gray-300 rounded-md text-xs font-mono"
              placeholder="–î–∞–Ω–Ω—ã–µ –∏–∑ Excel –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å..."
            />
          </div>
        )}

        {/* Error Display */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-md p-4">
            <div className="text-sm text-red-700">{error}</div>
          </div>
        )}

        {/* Actions */}
        <div className="flex justify-end space-x-3">
          <Button
            variant="outline"
            onClick={handleClose}
            disabled={loading}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            variant="primary"
            onClick={handleImport}
            disabled={!importData.trim() || loading}
            loading={loading}
          >
            {loading ? '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º...' : '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å'}
          </Button>
        </div>

        {/* Loading Overlay */}
        {loading && (
          <div className="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center">
            <LoadingSpinner size="lg" />
          </div>
        )}
      </div>
    </Modal>
  );
};

export default ImportModal;